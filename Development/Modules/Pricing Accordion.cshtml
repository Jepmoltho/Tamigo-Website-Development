@inherits Umbraco.Web.Macros.PartialViewMacroPage


<style>
.accordion {
  background-color: "" /* #eee;*/;
  color: #444;
  cursor: pointer;
  padding: 18px;
  width: 100%;
  border: none;
  text-align: left;
  outline: none;
  font-size: 15px;
  transition: 0.4s;
}
</style>
<style>
    /*Overrides default css for buttons*/
    button:focus{
        outline: none;
    }
    /*Colors left side of panel after class has been injected by JS upon click*/
    .active-panel-unique{
        border-left: 8px solid @Model.MacroParameters["topTitleTextColor"];
    }
</style>

<!--
<style>
.active, .accordion:hover {
  background-color: #ccc; 
}
</style>
-->
<style>
.panel {
  padding: 0 0px;
  display: none;
  background-color: white;
  overflow: hidden;
  border: 1px solid;
  border-color: @Model.MacroParameters["topTitleTextColor"];
}

.checkmark{
    max-width: 60px;
}

.col-sm-2{
    /*margin: 10px;*/
    margin-top: 10px;
    margin-right: 0px;
    margin-bottom: 10px;
    margin-left: 20px;
}

.flex-container {
  display: flex;
  flex-wrap: nowrap;
  background-color: none;
}

.flex-container-headlines {
  display: flex;
  flex-wrap: nowrap;
  background-color: none;
  overflow: hidden;
}


.package-icon-container{
    padding-left: 0px!important;
}

    .package-icon-acc{
        position: relative; 
        left: -5px; 
    }@@media (max-width: 1300px) {
        .package-icon-acc {
        position: relative; 
        left: -15px; 
    } }
    @@media (max-width: 1200px) {
        .package-icon-acc {
        position: relative; 
        left: -15px; 
    } }
    @@media (max-width: 1150px) {
        .package-icon-acc {
        position: relative; 
        left: -20px; 
    } }
    @@media (max-width: 1100px) {
        .package-icon-acc {
        position: relative; 
        left: -25px; 
    } }
    @@media (max-width: 991px) {
        .package-icon-acc {
        position: relative; 
        left: -25px; 
    } }
    @@media (max-width: 990px) {
        .package-icon-acc {
        position: relative; 
        left: -25px; 
    } }

</style>

<style>

.padding-accordion-container{
    padding-left: 140px;
    padding-right: 140px;
    padding-top: 100px;
    padding-bottom: 100px;
    background-color: @Model.MacroParameters["backgroundColor"];
    }
    @@media (max-width: 990px) {
        .padding-accordion-container {
            padding-left: 20px;
            padding-right: 20px;
            padding-top: 100px;
            padding-bottom: 100px;
    } }


</style>

<style>
.row-color-headline-container1{
    background-color: @Model.MacroParameters["colorRow1"];
}

.row-color-headline-container2{
    background-color: @Model.MacroParameters["colorRow2"];
}

.row-color-headline-container3{
    background-color: @Model.MacroParameters["colorRow3"];
}

.row-color-headline-container4{
    background-color: @Model.MacroParameters["colorRow4"];
}
</style>
<style>
/*Text styling*/
    .top-top-title{
        font-size: 2rem;
    }
    @@media (max-width: 990px) {
        .top-top-title{
        padding-left: 10px;
        font-size: 4rem;
    } }

    .row-color-headline-box{
        font-size: 1.8rem ;
    }
    @@media (max-width: 1300px) {
        .row-color-headline-box {
        font-size: 1.6rem;
        position: relative; 
        left: -15px; 
    } }
    @@media (max-width: 1200px) {
        .row-color-headline-box {
        font-size: 1.5rem;
        position: relative; 
        left: -15px; 
    } }
    @@media (max-width: 1150px) {
        .row-color-headline-box {
        font-size: 1.3rem;
        position: relative; 
        left: -20px; 
    } }
    @@media (max-width: 1100px) {
        .row-color-headline-box {
        font-size: 1.2rem;
        position: relative; 
        left: -25px; 
    } }
    @@media (max-width: 991px) {
        .row-color-headline-box {
        font-size: 1.2rem;
        position: relative; 
        left: -25px; 
    } }
    @@media (max-width: 990px) {
        .row-color-headline-box {
        font-size: 1.7rem;
    } }
    
    .panel-btn{
        font-size: 1.5rem ;
        margin-top: 16px;
    }
    @@media (max-width: 990px) {
        .panel-btn {
        font-size: 2rem;
    } }
    
    .checkmark-row{
        font-size: 1rem;
    }
    @@media (max-width: 990px) {
        .checkmark-row {
        font-size: 1.3rem;
    } }
    
    .package-text-center-box{
    
    }@@media (max-width: 990px) {
        .package-text-center-box {
        left: -5px;
        position: relative;
    } }
    
    .disclaimer-container-pr-ac{
        font-size: 1.2rem;
    }@@media (max-width: 990px) {
        .disclaimer-container-pr-ac {
            font-size: 1.5rem;
    } }
    
    .download-pricing-plan{
            font-size: 1.5rem;
    }@@media (max-width: 990px) {
        .download-pricing-plan {
            font-size: 2.2rem;
    } }
    
    
    .dropdown-symbol-pa{
     float:right; 
     max-height:25px;
     position: relative; 
     top: 6px;
    }@@media (max-width: 990px) {
        .dropdown-symbol-pa {
          top: 12px;
    } }
    
</style>

<style>
.panel-1{
 background-color: @Model.MacroParameters["backgroundColorFirstPanel"];
}

.panel-2{
 background-color: @Model.MacroParameters["backgroundColorSecondPanel"];
}

.panel-3{
 background-color: @Model.MacroParameters["backgroundColorFirstPanel"];
}

.panel-4{
 background-color: @Model.MacroParameters["backgroundColorSecondPanel"];
}

.panel-5{
 background-color: @Model.MacroParameters["backgroundColorFirstPanel"];
}

.panel-6{
 background-color: @Model.MacroParameters["backgroundColorSecondPanel"];
}

.panel-7{
 background-color: @Model.MacroParameters["backgroundColorFirstPanel"];
}

.panel-8{
 background-color: @Model.MacroParameters["backgroundColorSecondPanel"];
}

.panel-9{
 background-color: @Model.MacroParameters["backgroundColorFirstPanel"];
}

.panel-10{
 background-color: @Model.MacroParameters["backgroundColorSecondPanel"];
}

/*
.check-markrow-bg-col{
 background-color: Model.MacroParameters["backgroundColorEvenRows"];
}
*/

.img-in-div{
    display: flex;
    justify-content: center;
    align-items: center
    }@@media (max-width: 1300px) {
        .img-in-div {
        left: -15px; 
    } }
    @@media (max-width: 1200px) {
        .img-in-div {
        left: -15px; 
    } }
    @@media (max-width: 1150px) {
        .img-in-div{
        left: -20px; 
    } }
    @@media (max-width: 1100px) {
        .img-in-div {
        left: -25px; 
    } }
    @@media (max-width: 991px) {
        .img-in-div {
        left: -25px; 
    } }
    @@media (max-width: 990px) {
        .img-in-div {
        left: -15px; 
    } }

.sticky-container{
    position: -webkit-sticky;
    position: sticky;
    top: 0;
    background-color: @Model.MacroParameters["backgroundColor"];
    z-index: 3;
    margin-left: -1px;
}

    
</style>



<div class="padding-accordion-container d-@Model.MacroParameters["visible"]">

    <div class="accordion-container container-responsive-unique">
    <div class="sticky-container">
        <div class="top-top-title pb-5" style="color:@Model.MacroParameters["topTitleTextColor"]">@Html.Raw(Model.MacroParameters["title"])</div>
    
        <!-- Container for images above boxes -->
        <div class="flex-container-headlines">
              <div class="col-sm-3">
                  <!-- Is Empty -->
              </div>
              <div class="col-sm-2 package-icon-container">
                  <img class="package-icon package-icon-acc" src=@Umbraco.Media(Model.MacroParameters["icon1"]).Url >
              </div>
              <div class="col-sm-2 package-icon-container">
                  <img class="package-icon package-icon-acc" src=@Umbraco.Media(Model.MacroParameters["icon2"]).Url >
              </div>
              <div class="col-sm-2 package-icon-container">
                    <img class="package-icon package-icon-acc" src=@Umbraco.Media(Model.MacroParameters["icon3"]).Url >
              </div>
              <div class="col-sm-2 package-icon-container">
                <img class="package-icon package-icon-acc" src=@Umbraco.Media(Model.MacroParameters["icon4"]).Url >      
              </div>

          </div>
          
        <!-- Container for headlines in boxes -->
        <div class="flex-container-headlines">

              <div class="col-sm-3">
                  <!-- Is Empty -->
              </div>
              <div class="row-color-headline-container1 row-color-headline-box col-sm-2 bg-blue white pt-4 pb-4 pl-4">
                  <center class="package-text-center-box">
                    @Model.MacroParameters["titleBoxRow1"]
                </center>
              </div>
              <div class="row-color-headline-container2 row-color-headline-box col-sm-2 bg-blue white pt-4 pb-4 pl-4">
                  <center class="package-text-center-box">
                    @Model.MacroParameters["titleBoxRow2"]
                  </center>          
              </div>
              <div class="row-color-headline-container3 row-color-headline-box col-sm-2 bg-blue white pt-4 pb-4 pl-4">
                  <center class="package-text-center-box">
                    @Model.MacroParameters["titleBoxRow3"]
                  </center>          
              </div>
              <div class="row-color-headline-container4 row-color-headline-box col-sm-2 bg-blue white pt-4 pb-4 pl-4">
                  <center class="package-text-center-box">
                    @Model.MacroParameters["titleBoxRow4"]
                  </center>          
              </div>

          </div>
        </div>
        
        <!-- Panel 1 -->
        <button class="accordion panel-1 panel-btn d-@Model.MacroParameters["visiblePanel1"]" id="defaultOpenPanel1">@Model.MacroParameters["titlePanel1"]<img class="dropdown-symbol-pa" src="https://www.tamigo.nl/media/2710/expand-arrow.png"/></button>
        <div class="panel">
            
            @Html.Raw(Model.MacroParameters["macroRowPicker1"])
        
        </div>
         
         <!-- Panel 2 -->
        <button class="accordion panel-2 panel-btn d-@Model.MacroParameters["visiblePanel2"]">@Model.MacroParameters["titlePanel2"]<img class="dropdown-symbol-pa" src="https://www.tamigo.nl/media/2710/expand-arrow.png"/></button>
        <div class="panel">
                
            @Html.Raw(Model.MacroParameters["macroRowPicker2"])
                
        </div>
        
        <!-- Panel 3 -->
        <button class="accordion panel-3 panel-btn d-@Model.MacroParameters["visiblePanel3"]">@Model.MacroParameters["titlePanel3"]<img class="dropdown-symbol-pa" src="https://www.tamigo.nl/media/2710/expand-arrow.png"/></button>
        <div class="panel">
                
            @Html.Raw(Model.MacroParameters["macroRowPicker3"])
        
        </div>
        
        <!-- Panel 4 -->
        <button class="accordion panel-4 panel-btn d-@Model.MacroParameters["visiblePanel4"]">@Model.MacroParameters["titlePanel4"]<img class="dropdown-symbol-pa" src="https://www.tamigo.nl/media/2710/expand-arrow.png"/></button>
        <div class="panel">
                
            @Html.Raw(Model.MacroParameters["macroRowPicker4"])
        
        </div>
        
        <!-- Panel 5 -->
        <button class="accordion panel-5 panel-btn d-@Model.MacroParameters["visiblePanel5"]">@Model.MacroParameters["titlePanel5"]<img class="dropdown-symbol-pa" src="https://www.tamigo.nl/media/2710/expand-arrow.png"/></button>
        <div class="panel">
                
            @Html.Raw(Model.MacroParameters["macroRowPicker5"])
        
        </div>
        
        <!-- Panel 6 -->
        <button class="accordion panel-6 panel-btn d-@Model.MacroParameters["visiblePanel6"]">@Model.MacroParameters["titlePanel6"]<img class="dropdown-symbol-pa" src="https://www.tamigo.nl/media/2710/expand-arrow.png"/></button>
        <div class="panel">
                
            @Html.Raw(Model.MacroParameters["macroRowPicker6"])
        
        </div>
        
        <!-- Panel 7 -->
        <button class="accordion panel-7 panel-btn d-@Model.MacroParameters["visiblePanel7"]">@Model.MacroParameters["titlePanel7"]<img class="dropdown-symbol-pa" src="https://www.tamigo.nl/media/2710/expand-arrow.png"/></button>
        <div class="panel">
                
            @Html.Raw(Model.MacroParameters["macroRowPicker7"])
        
        </div>
        
        <!-- Panel 8 -->
        <button class="accordion panel-8 panel-btn d-@Model.MacroParameters["visiblePanel8"]">@Model.MacroParameters["titlePanel8"]<img class="dropdown-symbol-pa" src="https://www.tamigo.nl/media/2710/expand-arrow.png"/></button>
        <div class="panel">
                
            @Html.Raw(Model.MacroParameters["macroRowPicker8"])
        
        </div>
        
        <!-- Panel 9 -->
        <button class="accordion panel-9 panel-btn d-@Model.MacroParameters["visiblePanel9"]">@Model.MacroParameters["titlePanel9"]<img class="dropdown-symbol-pa" src="https://www.tamigo.nl/media/2710/expand-arrow.png"/></button>
        <div class="panel">
                
            @Html.Raw(Model.MacroParameters["macroRowPicker9"])
        
        </div>
        
        <!-- Panel 10 -->
        <button class="accordion panel-10 panel-btn d-@Model.MacroParameters["visiblePanel10"]">@Model.MacroParameters["titlePanel10"]<img class="dropdown-symbol-pa" src="https://www.tamigo.nl/media/2710/expand-arrow.png"/></button>
        <div class="panel">
                
            @Html.Raw(Model.MacroParameters["macroRowPicker10"])
        
        </div>
        
        <div class="disclaimer-container-pr-ac pt-3">@Model.MacroParameters["disclaimerText"]</div>
        <a href="@Model.MacroParameters["downloadFullPricingLink"]" style="color:#646464; text-decoration: underline; cursor: auto;"><div class="download-pricing-plan pt-4" style="text-align: right;">@Model.MacroParameters["downloadFullPricingText"]</div></a>
        
    </div>
</div>      


<script>

//Function to extend row height based on lines inside them
 function extendRowSize(){
    var lenghtOfRows = document.getElementsByClassName("title-of-row-acc").length;
    for (i = 0; i < lenghtOfRows; i++){
      if (document.getElementsByClassName("title-of-row-acc")[i].clientHeight < 25){
        document.getElementsByClassName("title-of-row-acc")[i].parentElement.parentElement.style.height = "50px"
      }
      if (document.getElementsByClassName("title-of-row-acc")[i].clientHeight > 25 && document.getElementsByClassName("title-of-row-acc")[i].clientHeight < 71){
          document.getElementsByClassName("title-of-row-acc")[i].parentElement.parentElement.style.height = "66px"
      }
      if (document.getElementsByClassName("title-of-row-acc")[i].clientHeight > 71){
          document.getElementsByClassName("title-of-row-acc")[i].parentElement.parentElement.style.height = "95px"
      }
    }
 }



//Visibility of accordion module 
if (document.getElementsByClassName('padding-accordion-container')[0].classList.contains("d-False")){
    $(".padding-accordion-container").css("display","none");
}


//Functionality of accordion dropdown 
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    this.classList.toggle("active-panel-unique"); /*Here*/
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
    extendRowSize(); /*Here*/
  });
}


</script>

<script>
//Visibility of checkmarks 
var noOfCheckmarks = document.getElementsByClassName('checkmark').length;
for (let i = 0; i < noOfCheckmarks; i++){
    //    if (document.getElementsByClassName('checkmark')[i].classList.contains("d-False")){
    if (document.getElementsByClassName('checkmark')[i].classList.contains("d-0")){
        document.getElementsByClassName('checkmark')[i].classList.add("hideCheckmark")
        console.log("added")
    }
}


//Visibility of panels 
if (document.getElementsByClassName('panel-1')[0].classList.contains("d-False")){
    $(".panel-1").css("display","none");
}

if (document.getElementsByClassName('panel-2')[0].classList.contains("d-False")){
    $(".panel-2").css("display","none");
}

if (document.getElementsByClassName('panel-3')[0].classList.contains("d-False")){
    $(".panel-3").css("display","none");
}

if (document.getElementsByClassName('panel-4')[0].classList.contains("d-False")){
    $(".panel-4").css("display","none");
}

if (document.getElementsByClassName('panel-5')[0].classList.contains("d-False")){
    $(".panel-5").css("display","none");
}

if (document.getElementsByClassName('panel-6')[0].classList.contains("d-False")){
    $(".panel-6").css("display","none");
}

if (document.getElementsByClassName('panel-7')[0].classList.contains("d-False")){
    $(".panel-7").css("display","none");
}

if (document.getElementsByClassName('panel-8')[0].classList.contains("d-False")){
    $(".panel-8").css("display","none");
}

if (document.getElementsByClassName('panel-9')[0].classList.contains("d-False")){
    $(".panel-9").css("display","none");
}

if (document.getElementsByClassName('panel-10')[0].classList.contains("d-False")){
    $(".panel-10").css("display","none");
}

//Clicks on the first panel by default
document.getElementById("defaultOpenPanel1").click();


    

//Hides checkmarks as the last thing after loops and coloring has finished 
setTimeout(() => {
  console.log("Delayed for 1 second.");
    //Checkmarks
    $(".hideCheckmark").css("display","none")
    //$(".hideCheckmark").hide()
    //Rows
    $(".hideCheckmarkRow").css("display","none")
    //$(".hideCheckmark").hide()
}, "500")


</script>



<script>

class Color {
  constructor(r, g, b) {
    this.set(r, g, b);
  }
  
  toString() {
    return `rgb(${Math.round(this.r)}, ${Math.round(this.g)}, ${Math.round(this.b)})`;
  }

  set(r, g, b) {
    this.r = this.clamp(r);
    this.g = this.clamp(g);
    this.b = this.clamp(b);
  }

  hueRotate(angle = 0) {
    angle = angle / 180 * Math.PI;
    const sin = Math.sin(angle);
    const cos = Math.cos(angle);

    this.multiply([
      0.213 + cos * 0.787 - sin * 0.213,
      0.715 - cos * 0.715 - sin * 0.715,
      0.072 - cos * 0.072 + sin * 0.928,
      0.213 - cos * 0.213 + sin * 0.143,
      0.715 + cos * 0.285 + sin * 0.140,
      0.072 - cos * 0.072 - sin * 0.283,
      0.213 - cos * 0.213 - sin * 0.787,
      0.715 - cos * 0.715 + sin * 0.715,
      0.072 + cos * 0.928 + sin * 0.072,
    ]);
  }

  grayscale(value = 1) {
    this.multiply([
      0.2126 + 0.7874 * (1 - value),
      0.7152 - 0.7152 * (1 - value),
      0.0722 - 0.0722 * (1 - value),
      0.2126 - 0.2126 * (1 - value),
      0.7152 + 0.2848 * (1 - value),
      0.0722 - 0.0722 * (1 - value),
      0.2126 - 0.2126 * (1 - value),
      0.7152 - 0.7152 * (1 - value),
      0.0722 + 0.9278 * (1 - value),
    ]);
  }

  sepia(value = 1) {
    this.multiply([
      0.393 + 0.607 * (1 - value),
      0.769 - 0.769 * (1 - value),
      0.189 - 0.189 * (1 - value),
      0.349 - 0.349 * (1 - value),
      0.686 + 0.314 * (1 - value),
      0.168 - 0.168 * (1 - value),
      0.272 - 0.272 * (1 - value),
      0.534 - 0.534 * (1 - value),
      0.131 + 0.869 * (1 - value),
    ]);
  }

  saturate(value = 1) {
    this.multiply([
      0.213 + 0.787 * value,
      0.715 - 0.715 * value,
      0.072 - 0.072 * value,
      0.213 - 0.213 * value,
      0.715 + 0.285 * value,
      0.072 - 0.072 * value,
      0.213 - 0.213 * value,
      0.715 - 0.715 * value,
      0.072 + 0.928 * value,
    ]);
  }

  multiply(matrix) {
    const newR = this.clamp(this.r * matrix[0] + this.g * matrix[1] + this.b * matrix[2]);
    const newG = this.clamp(this.r * matrix[3] + this.g * matrix[4] + this.b * matrix[5]);
    const newB = this.clamp(this.r * matrix[6] + this.g * matrix[7] + this.b * matrix[8]);
    this.r = newR;
    this.g = newG;
    this.b = newB;
  }

  brightness(value = 1) {
    this.linear(value);
  }
  contrast(value = 1) {
    this.linear(value, -(0.5 * value) + 0.5);
  }

  linear(slope = 1, intercept = 0) {
    this.r = this.clamp(this.r * slope + intercept * 255);
    this.g = this.clamp(this.g * slope + intercept * 255);
    this.b = this.clamp(this.b * slope + intercept * 255);
  }

  invert(value = 1) {
    this.r = this.clamp((value + this.r / 255 * (1 - 2 * value)) * 255);
    this.g = this.clamp((value + this.g / 255 * (1 - 2 * value)) * 255);
    this.b = this.clamp((value + this.b / 255 * (1 - 2 * value)) * 255);
  }

  hsl() {
    // Code taken from https://stackoverflow.com/a/9493060/2688027, licensed under CC BY-SA.
    const r = this.r / 255;
    const g = this.g / 255;
    const b = this.b / 255;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h, s, l = (max + min) / 2;

    if (max === min) {
      h = s = 0;
    } else {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;

        case g:
          h = (b - r) / d + 2;
          break;

        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }

    return {
      h: h * 100,
      s: s * 100,
      l: l * 100,
    };
  }

  clamp(value) {
    if (value > 255) {
      value = 255;
    } else if (value < 0) {
      value = 0;
    }
    return value;
  }
}

class Solver {
  constructor(target, baseColor) {
    this.target = target;
    this.targetHSL = target.hsl();
    this.reusedColor = new Color(0, 0, 0);
  }

  solve() {
    const result = this.solveNarrow(this.solveWide());
    return {
      values: result.values,
      loss: result.loss,
      filter: this.css(result.values),
    };
  }

  solveWide() {
    const A = 5;
    const c = 15;
    const a = [60, 180, 18000, 600, 1.2, 1.2];

    let best = { loss: Infinity };
    for (let i = 0; best.loss > 25 && i < 3; i++) {
      const initial = [50, 20, 3750, 50, 100, 100];
      const result = this.spsa(A, a, c, initial, 1000);
      if (result.loss < best.loss) {
        best = result;
      }
    }
    return best;
  }

  solveNarrow(wide) {
    const A = wide.loss;
    const c = 2;
    const A1 = A + 1;
    const a = [0.25 * A1, 0.25 * A1, A1, 0.25 * A1, 0.2 * A1, 0.2 * A1];
    return this.spsa(A, a, c, wide.values, 500);
  }

  spsa(A, a, c, values, iters) {
    const alpha = 1;
    const gamma = 0.16666666666666666;

    let best = null;
    let bestLoss = Infinity;
    const deltas = new Array(6);
    const highArgs = new Array(6);
    const lowArgs = new Array(6);

    for (let k = 0; k < iters; k++) {
      const ck = c / Math.pow(k + 1, gamma);
      for (let i = 0; i < 6; i++) {
        deltas[i] = Math.random() > 0.5 ? 1 : -1;
        highArgs[i] = values[i] + ck * deltas[i];
        lowArgs[i] = values[i] - ck * deltas[i];
      }

      const lossDiff = this.loss(highArgs) - this.loss(lowArgs);
      for (let i = 0; i < 6; i++) {
        const g = lossDiff / (2 * ck) * deltas[i];
        const ak = a[i] / Math.pow(A + k + 1, alpha);
        values[i] = fix(values[i] - ak * g, i);
      }

      const loss = this.loss(values);
      if (loss < bestLoss) {
        best = values.slice(0);
        bestLoss = loss;
      }
    }
    return { values: best, loss: bestLoss };

    function fix(value, idx) {
      let max = 100;
      if (idx === 2 /* saturate */) {
        max = 7500;
      } else if (idx === 4 /* brightness */ || idx === 5 /* contrast */) {
        max = 200;
      }

      if (idx === 3 /* hue-rotate */) {
        if (value > max) {
          value %= max;
        } else if (value < 0) {
          value = max + value % max;
        }
      } else if (value < 0) {
        value = 0;
      } else if (value > max) {
        value = max;
      }
      return value;
    }
  }

  loss(filters) {
    // Argument is array of percentages.
    const color = this.reusedColor;
    color.set(0, 0, 0);

    color.invert(filters[0] / 100);
    color.sepia(filters[1] / 100);
    color.saturate(filters[2] / 100);
    color.hueRotate(filters[3] * 3.6);
    color.brightness(filters[4] / 100);
    color.contrast(filters[5] / 100);

    const colorHSL = color.hsl();
    return (
      Math.abs(color.r - this.target.r) +
      Math.abs(color.g - this.target.g) +
      Math.abs(color.b - this.target.b) +
      Math.abs(colorHSL.h - this.targetHSL.h) +
      Math.abs(colorHSL.s - this.targetHSL.s) +
      Math.abs(colorHSL.l - this.targetHSL.l)
    );
  }

  //Return string with CSS style attrbute and value "filter: invert..."
  css(filters) {
    function fmt(idx, multiplier = 1) {
      return Math.round(filters[idx] * multiplier);
    }
    return `filter: invert(${fmt(0)}%) sepia(${fmt(1)}%) saturate(${fmt(2)}%) hue-rotate(${fmt(3, 3.6)}deg) brightness(${fmt(4)}%) contrast(${fmt(5)}%);`;
  }
}

function hexToRgb(hex) {
  // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
  const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, (m, r, g, b) => {
    return r + r + g + g + b + b;
  });

  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result
    ? [
      parseInt(result[1], 16),
      parseInt(result[2], 16),
      parseInt(result[3], 16),
    ]
    : null;
}

//Fire for checkmark 1 
$(document).ready(() => {
    
    const rgb = hexToRgb('@Model.MacroParameters["colorRow1"]');
    if (rgb.length !== 3) {
      alert('Invalid format!');
      return;
    }

    const color = new Color(rgb[0], rgb[1], rgb[2]);
    const solver = new Solver(color);
    const result = solver.solve();

    $('.filter-js').attr('style', result.filter);

});

//Fire for checkmark 2
$(document).ready(() => {

    const rgb = hexToRgb('@Model.MacroParameters["colorRow2"]');
    if (rgb.length !== 3) {
      alert('Invalid format!');
      return;
    }

    const color = new Color(rgb[0], rgb[1], rgb[2]);
    const solver = new Solver(color);
    const result = solver.solve();

    $('.filter-js2').attr('style', result.filter);

});

//Fire for checkmark 3
$(document).ready(() => {

    const rgb = hexToRgb('@Model.MacroParameters["colorRow3"]');
    if (rgb.length !== 3) {
      alert('Invalid format!');
      return;
    }

    const color = new Color(rgb[0], rgb[1], rgb[2]);
    const solver = new Solver(color);
    const result = solver.solve();

    $('.filter-js3').attr('style', result.filter);

});

//Fire for checkmark 4
$(document).ready(() => {

    const rgb = hexToRgb('@Model.MacroParameters["colorRow4"]');
    if (rgb.length !== 3) {
      alert('Invalid format!');
      return;
    }

    const color = new Color(rgb[0], rgb[1], rgb[2]);
    const solver = new Solver(color);
    const result = solver.solve();

    $('.filter-js4').attr('style', result.filter);

});


</script>



<!-- Media --> 
<!-- src=Umbraco.Media(Model.MacroParameters["mediaPickerTest"]).Url -->

<!-- Values --> 
<!-- Html.Raw(Model.MacroParameters["demoTitle"]) -->
<!-- Model.MacroParameters["buttonText"] --> 
